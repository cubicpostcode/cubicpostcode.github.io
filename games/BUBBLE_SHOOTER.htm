<!DOCTYPE html>
<html>
<head>
    <title>Bubble Shooter Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }

        #game-container {
            width: 400px;
            height: 600px;
            border: 1px solid #000;
            margin: 0 auto;
            position: relative;
        }

        .bubble {
            width: 40px;
            height: 40px;
            background: #00f;
            border-radius: 50%;
            position: absolute;
            transition: transform 0.2s;
        }

        .avatar {
            width: 40px;
            height: 40px;
            background: #f00;
            border-radius: 50%;
            position: absolute;
            transition: transform 0.2s;
        }
    </style>
</head>
<body>
    <div id="game-container"></div>
    <script>
        const gameContainer = document.getElementById('game-container');
        const bubbleRadius = 20;
        const bubbleDiameter = bubbleRadius * 2;
        const avatar = document.createElement('div');
        avatar.className = 'avatar';
        avatar.style.width = `${bubbleDiameter}px`;
        avatar.style.height = `${bubbleDiameter}px`;
        gameContainer.appendChild(avatar);

        const avatarSpeed = 5;
        let avatarX = gameContainer.clientWidth / 2 - bubbleRadius;
        let avatarY = gameContainer.clientHeight - bubbleRadius;

        // Array to store the bubbles
        const bubbles = [];

        // Function to create a bubble
        function createBubble(x, y) {
            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            bubble.style.width = `${bubbleDiameter}px`;
            bubble.style.height = `${bubbleDiameter}px`;
            bubble.style.left = `${x}px`;
            bubble.style.top = `${y}px`;
            gameContainer.appendChild(bubble);
            bubbles.push(bubble);
        }

        // Create a grid of bubbles
        const rows = 5;
        const cols = 8;
        const bubbleSpacing = 50;
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const x = col * bubbleSpacing + bubbleRadius;
                const y = row * bubbleSpacing + bubbleRadius;
                createBubble(x, y);
            }
        }

        // Function to handle arrow key presses for avatar movement
        function handleKeyPress(event) {
            switch (event.key) {
                case 'ArrowLeft':
                    avatarX -= avatarSpeed;
                    break;
                case 'ArrowRight':
                    avatarX += avatarSpeed;
                    break;
                case 'ArrowUp':
                    avatarY -= avatarSpeed;
                    break;
                case 'ArrowDown':
                    avatarY += avatarSpeed;
                    break;
            }

            // Ensure the avatar stays within the game container
            avatarX = Math.max(bubbleRadius, Math.min(gameContainer.clientWidth - bubbleRadius, avatarX));
            avatarY = Math.max(bubbleRadius, Math.min(gameContainer.clientHeight - bubbleRadius, avatarY));

            // Update the avatar's position
            avatar.style.transform = `translate(${avatarX}px, ${avatarY}px)`;

            // Check for collisions with bubbles
            checkCollisions();
        }

        // Function to check for collisions between avatar and bubbles
        function checkCollisions() {
            for (let i = bubbles.length - 1; i >= 0; i--) {
                const bubble = bubbles[i];
                const bubbleX = parseInt(bubble.style.left);
                const bubbleY = parseInt(bubble.style.top);

                const dx = bubbleX - avatarX;
                const dy = bubbleY - avatarY;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < bubbleRadius * 2) {
                    // Collision detected, remove the bubble
                    gameContainer.removeChild(bubble);
                    bubbles.splice(i, 1);
                }
            }
        }

        // Add event listener for arrow key presses
        window.addEventListener('keydown', handleKeyPress);
    </script>
</body>
</html>