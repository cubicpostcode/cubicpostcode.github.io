<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bubble Shooter</title>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
      font-family: 'Arial', sans-serif;
    }
    #game {
      position: relative;
      width: 400px;
      height: 600px;
    }
    canvas {
      border-radius: 15px;
      box-shadow: 0 0 20px rgba(0,0,0,0.2);
    }
    .menu {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255,255,255,0.9);
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      display: none;
      animation: popIn 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    }
    .btn {
      margin: 10px;
      padding: 10px 20px;
      background: #ff6b6b;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: transform 0.3s, background 0.3s;
    }
    .btn:hover {
      transform: scale(1.05);
      background: #ff8787;
    }
    @keyframes popIn {
      from { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
      to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
    }
  </style>
</head>
<body>
  <div id="game">
    <canvas id="gameCanvas" width="400" height="600"></canvas>
    <div id="pauseMenu" class="menu">
      <h2>Paused</h2>
      <button class="btn" id="resumeBtn">Resume</button>
      <button class="btn" id="restartBtn">Restart</button>
    </div>
    <div id="gameOverMenu" class="menu">
      <h2 id="gameResult">Game Over</h2>
      <button class="btn" id="playAgainBtn">Play Again</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const canvas = document.getElementById('gameCanvas');
      const ctx = canvas.getContext('2d');
      const pauseMenu = document.getElementById('pauseMenu');
      const gameOverMenu = document.getElementById('gameOverMenu');
      const gameResult = document.getElementById('gameResult');
      const resumeBtn = document.getElementById('resumeBtn');
      const restartBtn = document.getElementById('restartBtn');
      const playAgainBtn = document.getElementById('playAgainBtn');

      const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9d56e', '#8a2be2'];
      const bubbleRadius = 20;
      let cannonImage = new Image();
      cannonImage.src = 'https://github.com/cubicpostcode/cubicpostcode.github.io/blob/master/assets/cannon.png?raw=true';

      let bubbles = [];
      let shooter = { x: canvas.width / 2, y: canvas.height - 30, angle: -Math.PI / 2 };
      let currentBubble = null;
      let gameOver = false;
      let paused = false;

      function createBubble(x, y, color) {
        return { x, y, color, radius: bubbleRadius };
      }

      function initGame() {
        bubbles = [];
        for (let i = 0; i < 5; i++) {
          for (let j = 0; j < 8; j++) {
            bubbles.push(createBubble(j * bubbleRadius * 2 + bubbleRadius, i * bubbleRadius * 2 + bubbleRadius, colors[Math.floor(Math.random() * colors.length)]));
          }
        }
        currentBubble = createBubble(shooter.x, shooter.y, colors[Math.floor(Math.random() * colors.length)]);
        gameOver = false;
        paused = false;
      }

      function drawBubble(bubble) {
        ctx.beginPath();
        ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);
        ctx.fillStyle = bubble.color;
        ctx.fill();
        ctx.closePath();
      }

      function drawShooter() {
        ctx.drawImage(cannonImage, shooter.x - 20, shooter.y - 20, 40, 40);
      }
      

      function update() {
        if (gameOver || paused) return;

        ctx.clearRect(0, 0, canvas.width, canvas.height);

        bubbles.forEach(drawBubble);
        drawShooter();
        if (currentBubble) drawBubble(currentBubble);

        requestAnimationFrame(update);
      }

      function shoot() {
        if (!currentBubble || gameOver || paused) return;

        const speed = 10;
        const vx = Math.cos(shooter.angle) * speed;
        const vy = Math.sin(shooter.angle) * speed;

        function moveBubble() {
          currentBubble.x += vx;
          currentBubble.y += vy;

          if (currentBubble.x < bubbleRadius || currentBubble.x > canvas.width - bubbleRadius) {
            currentBubble.x = Math.max(bubbleRadius, Math.min(canvas.width - bubbleRadius, currentBubble.x));
            snapToGrid();
            return;
          }

          if (currentBubble.y < bubbleRadius) {
            snapToGrid();
            return;
          }

          for (let bubble of bubbles) {
            if (checkCollision(currentBubble, bubble)) {
              snapToGrid();
              return;
            }
          }

          requestAnimationFrame(moveBubble);
        }

        moveBubble();
      }

      function checkCollision(b1, b2) {
        const dx = b1.x - b2.x;
        const dy = b1.y - b2.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        return distance < b1.radius + b2.radius;
      }

      function snapToGrid() {
        const gridX = Math.round(currentBubble.x / (bubbleRadius * 2)) * bubbleRadius * 2;
        const gridY = Math.round(currentBubble.y / (bubbleRadius * 2)) * bubbleRadius * 2;
        bubbles.push(createBubble(gridX, gridY, currentBubble.color));
        checkForMatches();
        currentBubble = createBubble(shooter.x, shooter.y, colors[Math.floor(Math.random() * colors.length)]);
        checkGameOver();
      }

      function checkForMatches() {
        bubbles = bubbles.filter(bubble => {
          const matches = bubbles.filter(b => 
            b.color === bubble.color && 
            Math.abs(b.x - bubble.x) <= bubbleRadius * 2 && 
            Math.abs(b.y - bubble.y) <= bubbleRadius * 2
          );
          return matches.length < 3;
        });
      }

      function checkGameOver() {
        if (bubbles.some(bubble => bubble.y + bubble.radius > canvas.height - 60)) {
          gameOver = true;
          gameResult.textContent = 'Game Over';
          gameOverMenu.style.display = 'block';
        } else if (bubbles.length === 0) {
          gameOver = true;
          gameResult.textContent = 'You Win!';
          gameOverMenu.style.display = 'block';
        }
      }

      canvas.addEventListener('mousemove', (e) => {
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        shooter.angle = Math.atan2(y - shooter.y, x - shooter.x);
      });

      canvas.addEventListener('click', shoot);

      document.addEventListener('keydown', (e) => {
        if (e.code === 'Space') {
          if (gameOver) {
            initGame();
            gameOverMenu.style.display = 'none';
          } else {
            paused = !paused;
            pauseMenu.style.display = paused ? 'block' : 'none';
          }
        } else if (e.code === 'ArrowLeft') {
          shooter.angle -= 0.1;
          shooter.angle = Math.max(-Math.PI, Math.min(0, shooter.angle));
        } else if (e.code === 'ArrowRight') {
          shooter.angle += 0.1;
          shooter.angle = Math.max(-Math.PI, Math.min(0, shooter.angle));
        } else if (e.code === 'ArrowUp') {
          shoot();
        }
      });

      resumeBtn.addEventListener('click', () => {
        paused = false;
        pauseMenu.style.display = 'none';
      });

      restartBtn.addEventListener('click', () => {
        initGame();
        pauseMenu.style.display = 'none';
      });

      playAgainBtn.addEventListener('click', () => {
        initGame();
        gameOverMenu.style.display = 'none';
      });

      initGame();
      update();
    });
  </script>
</body>
</html>
