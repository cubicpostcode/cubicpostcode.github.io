<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PacMan</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

        :root {
            --primary-color: #2c3e50;
            --secondary-color: #ecf0f1;
            --accent-color: #e74c3c;
            --background-gradient: linear-gradient(135deg, #3498db, #8e44ad);
        }

        body, html {
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            background: var(--background-gradient);
            color: var(--secondary-color);
            font-family: 'Poppins', sans-serif;
        }

        .grid {
            display: flex;
            flex-wrap: wrap;
            width: 560px;
            height: 560px;
            border: 3px solid var(--secondary-color);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            border-radius: 15px;
        }

        .grid div {
            width: 20px;
            height: 20px;
        }

        .pac-dot, .power-pellet {
            background-color: var(--accent-color);
            animation: pulse 1s infinite;
        }

        .pac-dot {
            border: 5px solid var(--primary-color);
            box-sizing: border-box;
        }

        .power-pellet {
            border-radius: 50%;
        }

        .wall {
            background-color: var(--primary-color);
        }

        .pac-man {
            background-color: yellow;
            border-radius: 50%;
        }

        .blinky {
            background-color: red;
        }

        .pinky {
            background-color: pink;
        }

        .inky {
            background-color: cyan;
        }

        .clyde {
            background-color: orange;
        }

        .scared-ghost {
            background-color: aquamarine;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        h3 {
            margin: 20px;
            font-size: 2rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
    </style>
</head>
<body>
    <div class="grid"></div>
    <h3>Score: <span id="score">0</span></h3>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const scoreDisplay = document.getElementById('score');
            const width = 28;
            let score = 0;
            const grid = document.querySelector('.grid');
            const layout = [
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
                1,3,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,3,1,
                1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,
                1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,
                1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,4,4,4,4,4,4,4,4,4,4,1,1,0,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,4,1,1,1,2,2,1,1,1,4,1,1,0,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,4,1,2,2,2,2,2,2,1,4,1,1,0,1,1,1,1,1,1,
                4,4,4,4,4,4,0,0,0,4,1,2,2,2,2,2,2,1,4,0,0,0,4,4,4,4,4,4,
                1,1,1,1,1,1,0,1,1,4,1,2,2,2,2,2,2,1,4,1,1,0,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,4,1,1,1,1,1,1,1,1,4,1,1,0,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,4,1,1,1,1,1,1,1,1,4,1,1,0,1,1,1,1,1,1,
                1,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,1,
                1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
                1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
                1,3,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,3,1,
                1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
                1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
                1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,
                1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
                1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
            ];

            const squares = [];

            // Create the game board
            function createBoard() {
                for (let i = 0; i < layout.length; i++) {
                    const square = document.createElement('div');
                    grid.appendChild(square);
                    squares.push(square);

                    // Add layout to the board
                    if (layout[i] === 0) {
                        squares[i].classList.add('pac-dot');
                    } else if (layout[i] === 1) {
                        squares[i].classList.add('wall');
                    } else if (layout[i] === 2) {
                        squares[i].classList.add('ghost-lair');
                    } else if (layout[i] === 3) {
                        squares[i].classList.add('power-pellet');
                    }
                }
            }
            createBoard();

            // Create characters
            // Draw pacman onto the board
            let pacmanCurrentIndex = 490;
            squares[pacmanCurrentIndex].classList.add('pac-man');

            function movePacman(e) {
                squares[pacmanCurrentIndex].classList.remove('pac-man');
                switch (e.keyCode) {
                    case 37:
                        if (pacmanCurrentIndex % width !== 0 &&
                            !squares[pacmanCurrentIndex - 1].classList.contains('wall') &&
                            !squares[pacmanCurrentIndex - 1].classList.contains('ghost-lair'))
                            pacmanCurrentIndex -= 1;
                        if (squares[pacmanCurrentIndex - 1] === squares[363]) {
                            pacmanCurrentIndex = 391;
                        }
                        break;
                    case 38:
                        if (pacmanCurrentIndex - width >= 0 &&
                            !squares[pacmanCurrentIndex - width].classList.contains('wall') &&
                            !squares[pacmanCurrentIndex - width].classList.contains('ghost-lair'))
                            pacmanCurrentIndex -= width;
                        break;
                    case 39:
                        if (pacmanCurrentIndex % width < width - 1 &&
                            !squares[pacmanCurrentIndex + 1].classList.contains('wall') &&
                            !squares[pacmanCurrentIndex + 1].classList.contains('ghost-lair'))
                            pacmanCurrentIndex += 1;
                        if (squares[pacmanCurrentIndex + 1] === squares[392]) {
                            pacmanCurrentIndex = 364;
                        }
                        break;
                    case 40:
                        if (pacmanCurrentIndex + width < width * width &&
                            !squares[pacmanCurrentIndex + width].classList.contains('wall') &&
                            !squares[pacmanCurrentIndex + width].classList.contains('ghost-lair'))
                            pacmanCurrentIndex += width;
                        break;
                }
                squares[pacmanCurrentIndex].classList.add('pac-man');
                playMoveSound();
                pacDotEaten();
                powerPelletEaten();
                checkForGameOver();
                checkForWin();
            }
            document.addEventListener('keyup', movePacman);

            // Play move sound
            function playMoveSound() {
                const moveSound = new Audio('sound.mp3');
                moveSound.play();
            }

            // What happens when you eat a pac-dot
            function pacDotEaten() {
                if (squares[pacmanCurrentIndex].classList.contains('pac-dot')) {
                    score++;
                    scoreDisplay.innerHTML = score;
                    squares[pacmanCurrentIndex].classList.remove('pac-dot');
                }
            }

            // What happens when you eat a power-pellet
            function powerPelletEaten() {
                if (squares[pacmanCurrentIndex].classList.contains('power-pellet')) {
                    score += 10;
                    ghosts.forEach(ghost => ghost.isScared = true);
                    setTimeout(unScareGhosts, 10000);
                    squares[pacmanCurrentIndex].classList.remove('power-pellet');
                }
            }

            // Make the ghosts stop flashing
            function unScareGhosts() {
                ghosts.forEach(ghost => ghost.isScared = false);
            }

            // Create ghosts using constructors
            class Ghost {
                constructor(className, startIndex, speed) {
                    this.className = className;
                    this.startIndex = startIndex;
                    this.speed = speed;
                    this.currentIndex = startIndex;
                    this.isScared = false;
                    this.timerId = NaN;
                }
            }

            // All my ghosts
            const ghosts = [
                new Ghost('blinky', 348, 250),
                new Ghost('pinky', 376, 400),
                new Ghost('inky', 351, 300),
                new Ghost('clyde', 379, 500)
            ];

            // Draw my ghosts onto the grid
            ghosts.forEach(ghost => {
                squares[ghost.currentIndex].classList.add(ghost.className, 'ghost');
            });

            // Move the ghosts randomly
            ghosts.forEach(ghost => moveGhost(ghost));

            function moveGhost(ghost) {
                const directions = [-1, +1, width, -width];
                let direction = directions[Math.floor(Math.random() * directions.length)];

                ghost.timerId = setInterval(function() {
                    if (!squares[ghost.currentIndex + direction].classList.contains('ghost') &&
                        !squares[ghost.currentIndex + direction].classList.contains('wall')) {
                        squares[ghost.currentIndex].classList.remove(ghost.className, 'ghost', 'scared-ghost');
                        ghost.currentIndex += direction;
                        squares[ghost.currentIndex].classList.add(ghost.className, 'ghost');
                    } else direction = directions[Math.floor(Math.random() * directions.length)];

                    if (ghost.isScared) {
                        squares[ghost.currentIndex].classList.add('scared-ghost');
                    }

                    if (ghost.isScared && squares[ghost.currentIndex].classList.contains('pac-man')) {
                        squares[ghost.currentIndex].classList.remove(ghost.className, 'ghost', 'scared-ghost');
                        ghost.currentIndex = ghost.startIndex;
                        score += 100;
                        squares[ghost.currentIndex].classList.add(ghost.className, 'ghost');
                    }
                    checkForGameOver();
                }, ghost.speed);
            }

            // Check for a game over
            function checkForGameOver() {
                if (squares[pacmanCurrentIndex].classList.contains('ghost') &&
                    !squares[pacmanCurrentIndex].classList.contains('scared-ghost')) {
                    ghosts.forEach(ghost => clearInterval(ghost.timerId));
                    document.removeEventListener('keyup', movePacman);
                    setTimeout(() => alert("Game Over!"), 500);
                }
            }

            // Check for a win
            function checkForWin() {
                if (score === 274) {
                    ghosts.forEach(ghost => clearInterval(ghost.timerId));
                    document.removeEventListener('keyup', movePacman);
                    setTimeout(() => alert("You have WON!"), 500);
                }
            }
        });
    </script>
</body>
</html>
