<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Pac-Man</title>
    <style>
        :root {
            --cell-size: 20px;
            --grid-size: 28;
            --game-color: #FFD700;
            --wall-color: #2121DE;
            --dot-color: #ffffff;
            --ghost-colors: #FF0000, #FFB8FF, #00FFFF, #FFB852;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: #000;
            font-family: 'Arial', sans-serif;
            color: var(--game-color);
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(var(--grid-size), var(--cell-size));
            grid-template-rows: repeat(var(--grid-size), var(--cell-size));
            gap: 1px;
            background: var(--wall-color);
            border: 2px solid var(--game-color);
            box-shadow: 0 0 20px var(--game-color);
        }

        .cell {
            width: var(--cell-size);
            height: var(--cell-size);
            background: #000;
        }

        .wall { background: var(--wall-color); }

        .pac-dot {
            background: var(--dot-color);
            border-radius: 50%;
            transform: scale(0.3);
        }

        .power-pellet {
            background: var(--dot-color);
            border-radius: 50%;
            animation: pulse 0.7s infinite alternate;
        }

        .pac-man {
            background: var(--game-color);
            border-radius: 50%;
            animation: munch 0.3s linear infinite;
        }

        .ghost {
            border-radius: 50% 50% 0 0;
            animation: float 0.5s ease-in-out infinite alternate;
        }

        .blinky { background: var(--ghost-colors, 0); }
        .pinky { background: var(--ghost-colors, 1); }
        .inky { background: var(--ghost-colors, 2); }
        .clyde { background: var(--ghost-colors, 3); }

        .scared-ghost {
            background: blue !important;
            animation: scared 0.3s linear infinite alternate;
        }

        #score {
            font-size: 24px;
            margin: 20px 0;
        }

        @keyframes munch {
            0% { clip-path: polygon(100% 74%, 44% 48%, 100% 21%); }
            25% { clip-path: polygon(100% 60%, 44% 48%, 100% 40%); }
            50% { clip-path: polygon(100% 50%, 44% 48%, 100% 50%); }
            75% { clip-path: polygon(100% 59%, 44% 48%, 100% 35%); }
            100% { clip-path: polygon(100% 74%, 44% 48%, 100% 21%); }
        }

        @keyframes float {
            to { transform: translateY(-3px); }
        }

        @keyframes scared {
            to { background: white; }
        }

        @keyframes pulse {
            to { transform: scale(0.8); }
        }
    </style>
</head>
<body>
    <main class="game-container">
        <section id="score">Score: <span>0</span></section>
        <section class="grid" id="grid"></section>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const GRID_SIZE = 28;
            const EMPTY = 0, PAC_DOT = 0, WALL = 1, GHOST_LAIR = 2, POWER_PELLET = 3;
            
            const scoreDisplay = document.querySelector('#score span');
            const grid = document.getElementById('grid');
            let score = 0;
            let pacmanCurrentIndex = 490;
            let ghosts = [];

            const layout = [
                // ... (your existing layout array)
            ];

            function createBoard() {
                layout.forEach((cellType, i) => {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    grid.appendChild(cell);

                    switch(cellType) {
                        case PAC_DOT: cell.classList.add('pac-dot'); break;
                        case WALL: cell.classList.add('wall'); break;
                        case POWER_PELLET: cell.classList.add('power-pellet'); break;
                    }
                });
            }

            function drawPacman() {
                grid.children[pacmanCurrentIndex].classList.add('pac-man');
            }

            function movePacman(e) {
                grid.children[pacmanCurrentIndex].classList.remove('pac-man');
                switch(e.key) {
                    case 'ArrowLeft':
                        if (canMove(pacmanCurrentIndex - 1)) pacmanCurrentIndex--;
                        if (pacmanCurrentIndex === 364) pacmanCurrentIndex = 391;
                        break;
                    case 'ArrowUp':
                        if (canMove(pacmanCurrentIndex - GRID_SIZE)) pacmanCurrentIndex -= GRID_SIZE;
                        break;
                    case 'ArrowRight':
                        if (canMove(pacmanCurrentIndex + 1)) pacmanCurrentIndex++;
                        if (pacmanCurrentIndex === 391) pacmanCurrentIndex = 364;
                        break;
                    case 'ArrowDown':
                        if (canMove(pacmanCurrentIndex + GRID_SIZE)) pacmanCurrentIndex += GRID_SIZE;
                        break;
                }
                grid.children[pacmanCurrentIndex].classList.add('pac-man');
                pacDotEaten();
                powerPelletEaten();
                checkForGameOver();
                checkForWin();
            }

            function canMove(targetIndex) {
                return !grid.children[targetIndex].classList.contains('wall') && 
                       !grid.children[targetIndex].classList.contains('ghost-lair');
            }

            function pacDotEaten() {
                if (grid.children[pacmanCurrentIndex].classList.contains('pac-dot')) {
                    score++;
                    scoreDisplay.textContent = score;
                    grid.children[pacmanCurrentIndex].classList.remove('pac-dot');
                }
            }

            function powerPelletEaten() {
                if (grid.children[pacmanCurrentIndex].classList.contains('power-pellet')) {
                    score += 10;
                    ghosts.forEach(ghost => ghost.isScared = true);
                    setTimeout(unScareGhosts, 10000);
                    grid.children[pacmanCurrentIndex].classList.remove('power-pellet');
                }
            }

            function unScareGhosts() {
                ghosts.forEach(ghost => ghost.isScared = false);
            }

            class Ghost {
                constructor(className, startIndex, speed) {
                    this.className = className;
                    this.startIndex = startIndex;
                    this.speed = speed;
                    this.currentIndex = startIndex;
                    this.isScared = false;
                    this.timerId = NaN;
                }
            }

            function createGhosts() {
                return [
                    new Ghost('blinky', 348, 250),
                    new Ghost('pinky', 376, 400),
                    new Ghost('inky', 351, 300),
                    new Ghost('clyde', 379, 500)
                ];
            }

            function drawGhosts() {
                ghosts.forEach(ghost => {
                    grid.children[ghost.currentIndex].classList.add(ghost.className, 'ghost');
                });
            }

            function moveGhost(ghost) {
                const directions = [-1, 1, -GRID_SIZE, GRID_SIZE];
                let direction = directions[Math.floor(Math.random() * directions.length)];

                ghost.timerId = setInterval(() => {
                    if (canMoveGhost(ghost, direction)) {
                        grid.children[ghost.currentIndex].classList.remove(ghost.className, 'ghost', 'scared-ghost');
                        ghost.currentIndex += direction;
                        grid.children[ghost.currentIndex].classList.add(ghost.className, 'ghost');
                    } else {
                        direction = directions[Math.floor(Math.random() * directions.length)];
                    }

                    if (ghost.isScared) {
                        grid.children[ghost.currentIndex].classList.add('scared-ghost');
                    }

                    if (ghost.isScared && grid.children[ghost.currentIndex].classList.contains('pac-man')) {
                        grid.children[ghost.currentIndex].classList.remove(ghost.className, 'ghost', 'scared-ghost');
                        ghost.currentIndex = ghost.startIndex;
                        score += 100;
                        grid.children[ghost.currentIndex].classList.add(ghost.className, 'ghost');
                    }

                    checkForGameOver();
                }, ghost.speed);
            }

            function canMoveGhost(ghost, direction) {
                return !grid.children[ghost.currentIndex + direction].classList.contains('wall') && 
                       !grid.children[ghost.currentIndex + direction].classList.contains('ghost');
            }

            function checkForGameOver() {
                if (grid.children[pacmanCurrentIndex].classList.contains('ghost') &&
                    !grid.children[pacmanCurrentIndex].classList.contains('scared-ghost')) {
                    ghosts.forEach(ghost => clearInterval(ghost.timerId));
                    document.removeEventListener('keydown', movePacman);
                    setTimeout(() => alert("Game Over!"), 500);
                }
            }

            function checkForWin() {
                if (score === 274) {
                    ghosts.forEach(ghost => clearInterval(ghost.timerId));
                    document.removeEventListener('keydown', movePacman);
                    setTimeout(() => alert("You have WON!"), 500);
                }
            }

            function initGame() {
                createBoard();
                drawPacman();
                ghosts = createGhosts();
                drawGhosts();
                ghosts.forEach(moveGhost);
                document.addEventListener('keydown', movePacman);
            }

            initGame();
        });
    </script>
</body>
</html>
