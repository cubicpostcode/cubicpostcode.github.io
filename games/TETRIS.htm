<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Tetris Game</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

        :root {
            --primary-color: #2c3e50;
            --secondary-color: #ecf0f1;
            --accent-color: #e74c3c;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #3498db, #8e44ad);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
        }

        .game-container {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        h1 {
            color: var(--secondary-color);
            font-size: 3rem;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        #tetris {
            border: 3px solid var(--secondary-color);
            border-radius: 5px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
        }

        #score {
            font-size: 1.5rem;
            color: var(--secondary-color);
            margin-top: 20px;
        }

        .game-over {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: var(--secondary-color);
            padding: 30px 50px;
            border-radius: 15px;
            text-align: center;
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .btn {
            background-color: var(--accent-color);
            color: var(--secondary-color);
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

        .btn:hover {
            background-color: #c0392b;
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Tetris</h1>
        <canvas id="tetris" width="240" height="400"></canvas>
        <div id="score">Score: <span>0</span></div>
    </div>
    <div class="game-over">
        <h2>GAME OVER</h2>
        <p>Your final score: <span id="final-score">0</span></p>
        <button class="btn" onclick="restartGame()">Play Again</button>
    </div>

    <script>
        const canvas = document.getElementById('tetris');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.querySelector('#score span');
        const finalScoreElement = document.getElementById('final-score');

        const ROW = 20;
        const COL = 12;
        const SQ = 20;
        const VACANT = "#ecf0f1";

        let board = [];
        let score = 0;

        const PIECES = [
            [Z, "#e74c3c"],
            [S, "#2ecc71"],
            [T, "#9b59b6"],
            [O, "#f1c40f"],
            [L, "#e67e22"],
            [I, "#3498db"],
            [J, "#1abc9c"]
        ];

        // Initialize the board
        for (let r = 0; r < ROW; r++) {
            board[r] = [];
            for (let c = 0; c < COL; c++) {
                board[r][c] = VACANT;
            }
        }

        function drawSquare(x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x * SQ, y * SQ, SQ, SQ);
            ctx.strokeStyle = "#34495e";
            ctx.strokeRect(x * SQ, y * SQ, SQ, SQ);
        }

        function drawBoard() {
            for (let r = 0; r < ROW; r++) {
                for (let c = 0; c < COL; c++) {
                    drawSquare(c, r, board[r][c]);
                }
            }
        }

        function randomPiece() {
            let r = Math.floor(Math.random() * PIECES.length);
            return new Piece(PIECES[r][0], PIECES[r][1]);
        }

        let p = randomPiece();

        function Piece(tetromino, color) {
            this.tetromino = tetromino;
            this.color = color;
            this.tetrominoN = 0;
            this.activeTetromino = this.tetromino[this.tetrominoN];
            this.x = 3;
            this.y = -2;
        }

        Piece.prototype.fill = function(color) {
            for (let r = 0; r < this.activeTetromino.length; r++) {
                for (let c = 0; c < this.activeTetromino.length; c++) {
                    if (this.activeTetromino[r][c]) {
                        drawSquare(this.x + c, this.y + r, color);
                    }
                }
            }
        }

        Piece.prototype.draw = function() {
            this.fill(this.color);
        }

        Piece.prototype.unDraw = function() {
            this.fill(VACANT);
        }

        Piece.prototype.moveDown = function() {
            if (!this.collision(0, 1, this.activeTetromino)) {
                this.unDraw();
                this.y++;
                this.draw();
            } else {
                this.lock();
                p = randomPiece();
            }
        }

        Piece.prototype.moveRight = function() {
            if (!this.collision(1, 0, this.activeTetromino)) {
                this.unDraw();
                this.x++;
                this.draw();
            }
        }

        Piece.prototype.moveLeft = function() {
            if (!this.collision(-1, 0, this.activeTetromino)) {
                this.unDraw();
                this.x--;
                this.draw();
            }
        }

        Piece.prototype.rotate = function() {
            let nextPattern = this.tetromino[(this.tetrominoN + 1) % this.tetromino.length];
            let kick = 0;

            if (this.collision(0, 0, nextPattern)) {
                if (this.x > COL / 2) {
                    kick = -1;
                } else {
                    kick = 1;
                }
            }

            if (!this.collision(kick, 0, nextPattern)) {
                this.unDraw();
                this.x += kick;
                this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length;
                this.activeTetromino = this.tetromino[this.tetrominoN];
                this.draw();
            }
        }

        let gameOver = false;

        Piece.prototype.lock = function() {
            for (let r = 0; r < this.activeTetromino.length; r++) {
                for (let c = 0; c < this.activeTetromino.length; c++) {
                    if (!this.activeTetromino[r][c]) {
                        continue;
                    }
                    if (this.y + r < 0) {
                        gameOver = true;
                        document.querySelector(".game-over").style.display = "block";
                        finalScoreElement.textContent = score;
                        break;
                    }
                    board[this.y + r][this.x + c] = this.color;
                }
            }
            for (let r = 0; r < ROW; r++) {
                let isRowFull = true;
                for (let c = 0; c < COL; c++) {
                    isRowFull = isRowFull && (board[r][c] != VACANT);
                }
                if (isRowFull) {
                    for (let y = r; y > 1; y--) {
                        for (let c = 0; c < COL; c++) {
                            board[y][c] = board[y-1][c];
                        }
                    }
                    for (let c = 0; c < COL; c++) {
                        board[0][c] = VACANT;
                    }
                    score += 10;
                }
            }
            drawBoard();
            scoreElement.textContent = score;
        }

        Piece.prototype.collision = function(x, y, piece) {
            for (let r = 0; r < piece.length; r++) {
                for (let c = 0; c < piece.length; c++) {
                    if (!piece[r][c]) {
                        continue;
                    }
                    let newX = this.x + c + x;
                    let newY = this.y + r + y;
                    
                    if (newX < 0 || newX >= COL || newY >= ROW) {
                        return true;
                    }
                    if (newY < 0) {
                        continue;
                    }
                    if (board[newY][newX] != VACANT) {
                        return true;
                    }
                }
            }
            return false;
        }

        document.addEventListener("keydown", CONTROL);

        function CONTROL(event) {
            if (event.keyCode == 37) {
                p.moveLeft();
                dropStart = Date.now();
            } else if (event.keyCode == 38) {
                p.rotate();
                dropStart = Date.now();
            } else if (event.keyCode == 39) {
                p.moveRight();
                dropStart = Date.now();
            } else if (event.keyCode == 40) {
                p.moveDown();
            }
        }

        let dropStart = Date.now();
        let gameSpeed = 1000;

        function drop() {
            let now = Date.now();
            let delta = now - dropStart;
            if (delta > gameSpeed) {
                p.moveDown();
                dropStart = Date.now();
            }
            if (!gameOver) {
                requestAnimationFrame(drop);
            }
        }

        function restartGame() {
            location.reload();
        }

        drawBoard();
        drop();
    </script>
</body>
</html>
